Не выполняя кода, ответить, что выведет браузер и почему:
--------------------------------------------------------------------------


1)

if (!("a" in window)) {
    var a = 1;
}
alert(a);

    Результат выражения ("a" in window) будет равен false, так как window 
не имеет параметра, метода или функции с именем "а" с учётом его регистра; и
после этого применяется логическое отрицание, в итоге результат выражения
равен true. Переменной a присвоится значение 1 и оно будет выведено в окне
уведомления.
--------------------------------------------------------------------------


2)

var b = function a(x) {
    x && a(--x);
};
alert(a);

    Скорее всего, консоль браузера выведет ошибку undefined, так как происходит
попытка вызова функции как объекта, записанной в переменную; переменной a не существует.
--------------------------------------------------------------------------


3)

function a(x) {
    return x * 2;
}
var a;
alert(a);

    Будет выведен код функции в окне уведомления, так как производится
вызов функции как объекта.
--------------------------------------------------------------------------


4)

function b(x, y, a) {
    arguments[2] = 10;
    alert(a);
}
b(1, 2, 3);

    Будет выведено число 10. При вызове функции, в неё передаются аргументы
1, 2, и 3; число 3 (третий аргумент) в коде функции заменяется на число 10,
после чего он выводится в окно уведомления.
--------------------------------------------------------------------------


5)

function a() {
    alert(this);
}
a.call(null);

    Так как при использовании метода call первый её аргумент - это контекст,
а остальные аргументы передаются как есть, то при вызове функции a() будет выведен
объект контекста в окно уведомления. Однако, если передать первым аргументом 
null/undefined и не использовать директиву 'use strict', this будет равен 
объекту window. В обратном случае, this равен null/undefined.